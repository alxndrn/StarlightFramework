Starlight Test Automation Framework 


High-level Requirements:
- private closed sourced
- test web, desktop, mobile, REST
- integration - existing tooling - execute tests in CI
- cross platform
- unified API
- documentation + starter kit/learning guide

Framework Characteristics:
- test reliability
- easy to learn
- test readablility
- extensible
- maintainable
- troubleshooting easiness - screenshots, videos, logs
- unified team convention rules - StyleCop? documentation policies?
- advanced scenarios support - PDF verification, responsive/layout testing

Short Research Phase:


Detailed Requirements:
WebDriver, Appium, WinAppDriver, RestSharp
NUnit
Ghost Doc /// summary
AzureDevOps CI
Selenium Grid
no SpecFlow
StyleCop

Detailed Features Breakdown:
- test reliability
handle all syncronization issues
smart wait assertions

- easy to learn
similar API
getting started guide
add summary on methods (GhostDoc)
documentation

- faster tests creation
handy elements locators wrappers
handy wait methods wrappers

- test readablility
page objects usage enabled
BDD logging
app design pattern

- extensible
plugin architecture (Observer design pattern)
delegates - hooks
adding new locators
adding new waiters

- maintainable
abstracting the code so that we don't duplicate it (proper project structure to reuse everything, abstract it)
support JSON configuration
inversion of control container internally
support facedes?
webdriverManager

- troubleshooting easiness
full-page/normal screenshot on failure
videos on failure
logging to the console/file

- unified team convention rules
integrate StyleCop

- advanced scenarios support
support responsive/layout testing 

--------------------------------------------
Open source framework Selenide
Objectivity Ocaramba
JDI framework (epam)
atata framework